;; ulisp asteroids-like game
;;

;;
;; LilyGo T-Deck utility functions
;;

(defvar *tb-up-pin* 3)
(defvar *tb-down-pin* 15)
(defvar *tb-left-pin* 1)
(defvar *tb-right-pin* 2)
(defvar *tb-button-pin* 0)

(defvar *tb-up-state* nil)
(defvar *tb-up-old-state* nil)
(defvar *tb-down-state* nil)
(defvar *tb-down-old-state* nil)
(defvar *tb-left-state* nil)
(defvar *tb-left-old-state* nil)
(defvar *tb-right-state* nil)
(defvar *tb-right-old-state* nil)

(defvar dx 0)
(defvar dy 0)
(defvar tb-clicked nil)

(defun tb-init ()
  (pinmode *tb-up-pin* :input-pullup)
  (pinmode *tb-down-pin* :input-pullup)
  (pinmode *tb-left-pin* :input-pullup)
  (pinmode *tb-right-pin* :input-pullup)
  (pinmode *tb-button-pin* :input-pullup)
  (setq *tb-up-old-state* (digitalread *tb-up-pin*))
  (setq *tb-down-old-state* (digitalread *tb-down-pin*))
  (setq *tb-left-old-state* (digitalread *tb-left-pin*))
  (setq *tb-right-old-state* (digitalread *tb-right-pin*)))
  

(defun tb-read ()
  (setq dx 0)
  (setq dy 0)
  (setq *tb-up-state* (digitalread *tb-up-pin*))
  (setq *tb-down-state* (digitalread *tb-down-pin*))
  (setq *tb-left-state* (digitalread *tb-left-pin*))
  (setq *tb-right-state* (digitalread *tb-right-pin*))
  (if (not (equal *tb-up-state* *tb-up-old-state*))
      (setq dy -1)
      (if (not (equal *tb-down-state* *tb-down-old-state*))
          (setq dy 1)))
  (if (not (equal *tb-left-state* *tb-left-old-state*))
      (setq dx -1)
      (if (not (equal *tb-right-state* *tb-right-old-state*))
          (setq dx 1)))
  (setq tb-clicked (not (digitalread *tb-button-pin*)))
  (setq *tb-up-old-state* *tb-up-state*)
  (setq *tb-down-old-state* *tb-down-state*)
  (setq *tb-left-old-state* *tb-left-state*)
  (setq *tb-right-old-state* *tb-right-state*))


(defun rgb (r g b)
  (logior (ash (logand r #xf8) 8) (ash (logand g #xfc) 3) (ash b -3)))


;; vector math functions

(defvar pi   3.1415927)
(defvar 2pi  6.2831853)
(defvar pi/2 1.5707963)
(defvar pi/4 0.7853982)

(defun vector-add (a b)
  (mapcar #'+ a b))

(defun vector-scale (v factor)
  (mapcar #'* v (list factor factor)))

(defun vector-sub (a b)
  (mapcar #'- a b))

(defun vector-dist (a b)
  (sqrt (apply #'+
               (mapcar (lambda (x)
                         (expt x 2))
                       (vector-sub a b)))))

(defun intersects? (mob1 mob2)
  (< (vector-dist (cdr (assoc 'pos mob1)) (cdr (assoc 'pos mob2)))
     (+ (cdr (assoc 'radius mob1)) (cdr (assoc 'radius mob2)))))

(defvar d->r (/ pi 180.0))

(defun deg->rad (degs)
  (* degs d->r))

(defvar r->d (/ 180.0 pi))

(defun rad->deg (rads)
  (* rads r->d))

(defun polar->rect (pt)
  (list (* (car pt) (cos (cadr pt)))
        (* (car pt) (sin (cadr pt)))))

(defun rect->polar (pt)
  (list (sqrt (+ (* (car pt) (car pt)) (* (cadr pt) (cadr pt))))
        (atan (/ (cadr pt) (car pt)))))

(defun reduce (fn lst)
  (if (null (cdr lst)) (car lst)
    (funcall fn (car lst) (reduce fn (cdr lst)))))

(defun remove (x lst)
  (mapcan #'(lambda (y) (unless (eq x y) (list y))) lst))

(defun remove-if (tst lst)
  (mapcan #'(lambda (x) (unless (funcall tst x) (list x))) lst))

(defun draw-polygon (vertices color)
  (let ((point (first vertices)))
    (dolist (next (reverse vertices))
      (draw-line (round (first point)) (round (second point))
                 (round (first next)) (round (second next))
                 color)
      (setf point next))))

   
;; constants

(defvar *display-width* 320)
(defvar *display-height* 240)
(defvar *center-x* (/ *display-width* 2))
(defvar *center-y* (/ *display-height* 2))
(defvar *num-rocks* 3)
(defvar *rock-sides* 9)
(defvar *rock-radius* 16)
(defvar *rock-max-rotation* (/ pi 8))
(defvar *ship-radius* 12)
(defvar *rotate-vel* (/ pi 16))
(defvar *ship-thrust* 0.2)
(defvar *max-shots* 3)
(defvar *min-shot-delay* 400)
(defvar *shot-vel* 5)
(defvar *shot-life* 4000)

;; game state

;;; make a mobile object
;; pos (x y)
;; vel (r theta)
;; radius r
;; facing theta
;; vertices (list (r theta))
(defun make-mob (pos vel accel radius facing rotation vertices)
  (list
   (cons 'pos pos)
   (cons 'vel vel)
   (cons 'accel accel)
   (cons 'radius radius)
   (cons 'facing facing)
   (cons 'rotation rotation)
   (cons 'vertices vertices)))

;;; rotate point pt in polar coordinates by angle
(defun rotate-point (pt angle)
  (list (car pt) (+ (cadr pt) angle)))

;;; convert vertices from polar coords around 0 to rect coords around mob pos
(defun screen-points (mob)
  (let ((pos (cdr (assoc 'pos mob)))
        (facing (cdr (assoc 'facing mob)))
        (vertices (cdr (assoc 'vertices mob))))
    (mapcar (lambda (pt) (vector-add pos (polar->rect (rotate-point pt facing)))) vertices)))


(defun draw-mob (mob color)
  (draw-polygon (screen-points mob) color))


(defun show-score ()
  (set-cursor 0 0)
  (set-text-size 1)
  (set-text-color (rgb 0 255 0) 0)
  (with-gfx (str) (format str "~4,'0d" score)))

;;; wrap mob around screen in both directions
(defun wrap-mob-at-screen-edge (mob)
  (let* ((pos (cdr (assoc 'pos mob)))
         (x (car pos))
         (y (cadr pos)))
    (setf x (mod x *display-width*))
    (setf y (mod y *display-height*))
    (setf (cdr (assoc 'pos mob)) (list x y))))


(defun update-mob-pos (mob)
  (setf (cdr (assoc 'pos mob)) (vector-add (cdr (assoc 'pos mob)) (cdr (assoc 'vel mob))))
  (wrap-mob-at-screen-edge mob))

;;; adjust mob's facing by theta
(defun rotate-mob (mob theta)
  (setf (cdr (assoc 'facing mob)) (+ (cdr (assoc 'facing mob)) theta)))

;;; adjust mob's velocity by accel-vector in polar coords
(defun accel-mob (mob accel-vector)
  (setf (cdr (assoc 'vel mob))
        (vector-add (cdr (assoc 'vel mob)) (polar->rect accel-vector))))

;;; handle ship-rock collision
(defun ship-collide (r)
  (draw-mob ship 0)
  (when (> *lives* 0)
    (decf *lives*)
    (setf (cdr (assoc 'pos ship)) (list *center-x* *center-y*))
    (setf (cdr (assoc 'facing ship)) (deg->rad -90))
    (setf (cdr (assoc 'vel ship)) '(0 0)))
  (draw-mob r 0)
  (make-child-rocks r)
  (setf rocks (remove r rocks)))
    
;;; handle rock-rock collision
(defun rock-collide (r1 r2)
  (draw-mob r1 0)
  (draw-mob r2 0)
  (make-child-rocks r1)
  (make-child-rocks r2)
  (setf rocks (remove r1 (remove r2 rocks))))

;;; handle shot-rock collision
(defun shot-collide (s r)
  (draw-mob s 0)
  (draw-mob r 0)
  (setf shots (remove s shots))
  (make-child-rocks r)
  (setf rocks (remove r rocks))
  (incf score 10))


(defun check-collision ()
  (dolist (r rocks)
    (if (intersects? ship r)
        (ship-collide r))
    (dolist (s shots)
      (if (intersects? s r)
          (shot-collide s r)))))

    ;(dolist (r2 rocks)
    ;  (if (and (not (eq r r2)) (intersects? r r2))
    ;      (rock-collide r r2)))))
                 

(defun rock-vertices (max-radius)
  (let ((vertices nil))
    (dotimes (i *rock-sides* vertices)
      (let ((theta (* i (/ 2pi *rock-sides*)))
            (radius (* max-radius (- 1.0 (random 0.6)))))
        (setf vertices (cons (list radius theta) vertices))))))


(defvar *rock-starting-points* 
  (list (list 0 0) (list *center-x* 0) (list *display-width* 0)
        (list 0 *center-y*) (list *display-width* *center-y*)
        (list 0 *display-height*) (list *center-x* *display-height*) (list *display-width* *display-height*)))


(defun fire-shot ()
  (when (and (< (length shots) *max-shots*) (> (millis) (+ last-shot-time *min-shot-delay*)))
    (setf last-shot-time (millis))
    (let ((start-pos (car (screen-points ship)))
          (facing (cdr (assoc 'facing ship))))
      (setf shots
            (cons
               (make-mob
                 start-pos
                 (polar->rect (list *shot-vel* facing))
                 (list 0.0 0.0)
                 1
                 facing
                 0
                 (list (list 1 facing) (list 2 facing)))
               shots))
      (setf (car shots) (cons (cons 'fire-time (millis)) (car shots))))))
          

(defun expire-shots ()
  (setf shots (remove-if (lambda (s) (< (cdr (assoc 'fire-time s)) (- (millis) *shot-life*))) shots)))

(defun game-over ()
  (set-cursor 25 55)
  (set-text-color (rgb 255 128 0) 0)
  (set-text-size 2)
  (with-gfx (str) (format str "GAME OVER")))

(defun make-child-rocks (r)
  (let ((rad (* 0.67 (cdr (assoc 'radius r)))))
    (when (and (> rad 7) (< (length rocks) 6))
      (dolist (i '(-1 1))
        (setf rocks
              (cons (make-mob
                     (vector-add (cdr (assoc 'pos r))
                                (list (* i (cdr (assoc 'radius r))) (* i (cdr (assoc 'radius r)))))
                     (vector-scale (cdr (assoc 'vel r)) (* i 2))
                     (list 0.0 0.0)
                     rad
                     (+ (cdr (assoc 'facing r)) (* i pi/4))
                     (+ (- 0 *rock-max-rotation*) (random (* *rock-max-rotation* 2)))
                     (rock-vertices rad))
                    rocks))))))
 
  
(defun init-rocks ()
  (let ((start-points nil))
    (dotimes (i *num-rocks*)
      (loop
       (let ((start-point (nth (random 8) *rock-starting-points*)))
         (unless (member start-point start-points)
           (setf start-points (cons start-point start-points))
           (return))))
      (setf rocks
            (cons
                (make-mob
                  (car start-points)
                  (list (+ -1.0 (random 2.0)) (+ -1.0 (random 2.0)))
                  (list 0.0 0.0)
                  *rock-radius*
                  (deg->rad 0.0)
                  (+ (- 0 *rock-max-rotation*) (random (* *rock-max-rotation* 2)))
                  (rock-vertices *rock-radius*))
                rocks)))))
       
  
(defun init ()
  (tb-init)
  (fill-screen)
  (defvar score 0)
  (defvar rocks nil)
  (defvar shots nil)
  (defvar last-shot-time 0)
  (defvar *lives* 5)
  (init-rocks)
  (defvar ship (make-mob
                (list *center-x* *center-y*)                 
                (list 0.0 0.0)                               
                (list 0.0 0.0)                               
                *ship-radius*                                
                (deg->rad -90.0)
                0.0
                (list (list *ship-radius* (deg->rad 0.0))    
                      (list *ship-radius* (deg->rad 140.0))
                      (list (/ *ship-radius* 2) (deg->rad 180.0))
                      (list *ship-radius* (deg->rad -140))))))



(defvar *buttons* 0)
(defvar *frame-start* 0)
(defvar *frame-duration* 0)

(defun play-game ()
  (init)
  (loop
   (setf *frame-start* (millis))
   (if (null rocks) (init-rocks))
   (tb-read)
   (dolist (r rocks) (draw-mob r 0))
   (dolist (s shots) (draw-mob s 0))
   (draw-mob ship 0)
   (if (< dy 0) (accel-mob ship (list *ship-thrust* (cdr (assoc 'facing ship)))))
   (if (< dx 0) (rotate-mob ship (- 0.0 *rotate-vel*)))
   (if (> dx 0) (rotate-mob ship *rotate-vel*))
   (if tb-clicked (fire-shot))
   (when (<= *lives* 0)
      (game-over)
      (return))
   (dolist (r rocks)
     (rotate-mob r (cdr (assoc 'rotation r)))
     (update-mob-pos r)
     (draw-mob r 65535))
   (expire-shots)
   (dolist (s shots)
     (update-mob-pos s)
     (draw-mob s 65535))
   (update-mob-pos ship)
   (check-collision)
   (draw-mob ship 65535)
   (show-score)
   (setf *frame-duration* (- (millis) *frame-start*))
   (with-gfx (str)
             (set-cursor 140 0)
             (set-text-size 1)
             (format str "~3,'0d" *frame-duration*))
   (delay (max 1 (- 20 *frame-duration*)))))

(defvar flash nil)

(defun attract-mode ()
  (tb-init)
  (fill-screen)
  (loop
    (setf flash (not flash))
    (set-text-color (rgb 0 255 0) 0)
    (set-text-size 2)
    (with-gfx (str)
     (set-cursor 42 30)
     (format str "uROCKS")
     (set-cursor 15 80)
     (if flash (set-text-color (rgb 0 255 0) 0) (set-text-color (rgb 0 0 0) 0))
     (format str "PRESS START"))
    (tb-read)
    (when tb-clicked
      (play-game))
    (delay 100)))

(attract-mode)

(play-game)
~
(pprint attract-mode)

(save-image attract-mode)
(load-image)
;; testing routines

(setf *lives* 0)

(dotimes (i 64)
  (draw-mob ship 0)
  (setf (cdr (assoc 'facing ship)) (- (cdr (assoc 'facing ship)) (/ pi 32)))
  (draw-mob ship 65535)
  (delay 10))
  
(screen-points ship)
(draw-mob ship 65535)

(polar->rect (list 1 -1.5708))
(vector-add (list 80 64) (list 0 -1))

(accel-mob ship (list *ship-thrust* (cdr (assoc 'facing ship))))
(rotate-mob ship pi/2)
(vector-add (cdr (assoc 'pos ship)) (cdr (assoc 'vel ship)))
(setf (cdr (assoc 'pos ship)) (vector-add (cdr (assoc 'pos ship)) (cdr (assoc 'vel ship))))
(wrap-mob-on-screen ship)
(update-mob-pos ship)
ship

(defvar score 0)
(incf score 10)
score
